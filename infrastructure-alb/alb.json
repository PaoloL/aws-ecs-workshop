{
  "AWSTemplateFormatVersion":"2010-09-09",

  "Description" : "Workshop Microservices: Application Load Balancer",

  "Parameters": {

    "Project":
    {
      "Type":"String",
      "Description":"Project name"
    },
    "Environment":
    {
      "Type":"String",
      "Description":"Environment name"
    },
    "Role":
    {
      "Type":"String",
      "Description":"Role name, for example Frontend"
    },
    "VpcId":
    {
      "Type":"AWS::EC2::VPC::Id",
      "Description":"Select a VPC that allows instances to access the Internet."
    },
    "SubnetsList":
    {
      "Type":"CommaDelimitedList",
      "Description":"Select at two subnets in your selected VPC."
    }
  },

  "Resources": {

    "LoadBalancerSecurityGroup": {
      "Type":"AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription":"ECS Security Group",
        "VpcId":{ "Ref":"VpcId" },
        "SecurityGroupIngress" : [
          {
            "IpProtocol":"tcp",
            "FromPort":"80",
            "ToPort":"80",
            "CidrIp":"0.0.0.0/0"
          }
        ]
      }
    },

    "ApplicationLoadBalancer": {
      "Type":"AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Name":{ "Fn::Join":["-",[{"Ref":"Project"},{"Ref":"Environment"},{"Ref":"Role"}]]},
        "Scheme":"internet-facing",
        "LoadBalancerAttributes":[
          {
            "Key":"idle_timeout.timeout_seconds",
            "Value":"30"
          }
        ],
        "Subnets":{"Ref":"SubnetsList"},
        "SecurityGroups":[ { "Ref":"LoadBalancerSecurityGroup" } ]
      }
    },

    "ApplicationLoadBalancerHTTPListener": {
      "Type":"AWS::ElasticLoadBalancingV2::Listener",
      "Properties":{
        "DefaultActions": [
          {
            "Type":"forward",
            "TargetGroupArn":{"Ref":"TargetGroupMicroservicesOne"}
          }
        ],
        "LoadBalancerArn":{ "Ref":"ApplicationLoadBalancer"},
        "Port":"80",
        "Protocol":"HTTP"
      }
    },

    "ApplicationLoadBalancerMicroserviceOneListenerRule": {
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
      "Properties": {
        "Actions": [
          {
            "Type": "forward",
            "TargetGroupArn": { "Ref": "TargetGroupMicroservicesOne" }
          }
        ],
          "Conditions": [{
            "Field": "path-pattern",
            "Values": [ "/one*" ]
            }],
            "ListenerArn": { "Ref": "ApplicationLoadBalancerHTTPListener" },
            "Priority": 1
          }
        },

    "ApplicationLoadBalancerMicroserviceTwoListenerRule": {
          "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
          "Properties": {
            "Actions": [
              {
                "Type": "forward",
                "TargetGroupArn": { "Ref": "TargetGroupMicroservicesTwo" }
              }
            ],
              "Conditions": [{
                "Field": "path-pattern",
                "Values": [ "/two*" ]
                }],
                "ListenerArn": { "Ref": "ApplicationLoadBalancerHTTPListener" },
                "Priority": 2
              }
              } ,

    "TargetGroupMicroservicesOne": {
      "Type":"AWS::ElasticLoadBalancingV2::TargetGroup",
      "DependsOn":"ApplicationLoadBalancer",
      "Properties":{
        "HealthCheckIntervalSeconds":10,
        "HealthCheckPath":"/one",
        "HealthCheckProtocol":"HTTP",
        "HealthCheckTimeoutSeconds":5,
        "HealthyThresholdCount":2,
        "Name":{ "Fn::Join":["-",[{"Ref":"Role"},"one"]]},
        "Port":80,
        "Protocol":"HTTP",
        "UnhealthyThresholdCount":2,
        "VpcId":{ "Ref":"VpcId" }
      }
    },

    "TargetGroupMicroservicesTwo": {
      "Type":"AWS::ElasticLoadBalancingV2::TargetGroup",
      "DependsOn":"ApplicationLoadBalancer",
      "Properties":{
        "HealthCheckIntervalSeconds":10,
        "HealthCheckPath":"/two",
        "HealthCheckProtocol":"HTTP",
        "HealthCheckTimeoutSeconds":5,
        "HealthyThresholdCount":2,
        "Name":{ "Fn::Join":["-",[{"Ref":"Role"},"two"]]},
        "Port":80,
        "Protocol":"HTTP",
        "UnhealthyThresholdCount":2,
        "VpcId":{ "Ref":"VpcId" }
      }
    }
  },

  "Outputs":
  {
    "TargetGroupArnMicroserviceOne":
    {
      "Value":{"Ref": "TargetGroupMicroservicesOne"}
    },
    "TargetGroupArnMicroserviceTwo":
    {
      "Value":{"Ref": "TargetGroupMicroservicesTwo"}
    },
    "LoadBalancerDNSName":
    {
      "Value" : { "Fn::GetAtt" : [ "ApplicationLoadBalancer", "DNSName" ]}
    }
  }
}
